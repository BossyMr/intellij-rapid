/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.bossymr.rapid.language.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.bossymr.rapid.language.psi.RapidTokenTypes;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>C:/Users/Robert Fromholz/Documents/Projects/intellij-rapid/src/main/java/com/bossymr/rapid/language/grammar/Rapid.flex</tt>
 */
class _RapidLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial degree of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime degree is 18560 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\25\1\61\1\62\5\21\2\25\1\63"+
    "\7\21\1\25\1\64\20\21\1\25\1\65\1\21\1\66\13\25\1\67\2\25\1\70\21\21\1\71"+
    "\1\72\4\21\1\73\11\21\1\74\1\75\1\76\1\77\1\21\1\100\2\21\1\101\1\102\2\21"+
    "\1\103\1\21\1\104\1\105\5\21\1\106\2\21\123\25\1\107\7\25\1\110\1\111\12\25"+
    "\1\112\15\25\1\113\6\21\1\25\1\114\2\21\11\25\1\115\u0576\21\1\116\u017f\21");

  /* The ZZ_CMAP_Y table has 5056 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\21\1\36\11\21"+
    "\1\37\21\21\1\40\1\41\24\21\1\42\3\21\1\22\1\43\5\21\1\44\1\45\4\0\1\46\1"+
    "\47\1\27\3\21\1\50\1\51\1\27\1\52\1\53\1\0\1\54\5\21\1\55\3\0\1\56\1\57\13"+
    "\21\1\60\1\46\1\61\1\62\1\0\1\63\1\27\1\64\1\65\3\21\3\0\1\66\12\21\1\67\1"+
    "\0\1\70\1\27\1\0\1\71\3\21\1\55\1\72\1\73\2\21\1\67\1\74\1\75\1\76\2\27\3"+
    "\21\1\77\1\21\1\51\6\27\2\21\1\32\2\21\1\27\1\100\5\0\1\101\6\21\1\102\2\0"+
    "\1\103\1\21\1\104\1\0\1\42\1\21\1\105\1\106\1\107\2\21\1\110\1\111\1\112\1"+
    "\113\1\114\1\64\1\115\1\104\1\0\1\116\1\117\1\120\1\50\1\107\2\21\1\110\1"+
    "\121\1\122\1\123\1\124\1\125\1\126\1\127\1\0\1\130\1\27\1\120\1\37\1\36\2"+
    "\21\1\110\1\131\1\112\1\46\1\132\1\133\1\27\1\104\1\0\1\43\1\134\1\120\1\106"+
    "\1\107\2\21\1\110\1\131\1\112\1\113\1\124\1\135\1\115\1\104\1\0\1\43\1\27"+
    "\1\136\1\137\1\140\1\141\1\142\1\137\1\21\1\143\1\144\1\145\1\146\1\27\1\127"+
    "\1\0\1\27\1\43\1\147\1\32\1\110\2\21\1\110\1\21\1\150\1\151\1\145\1\152\1"+
    "\51\1\104\1\0\2\27\1\105\1\32\1\110\2\21\1\110\1\153\1\112\1\151\1\145\1\152"+
    "\1\34\1\104\1\0\1\154\1\27\1\101\1\32\1\110\4\21\1\155\1\151\1\156\1\157\1"+
    "\160\1\104\1\0\1\27\1\41\1\120\1\21\1\22\1\41\2\21\1\36\1\161\1\22\1\162\1"+
    "\163\1\0\1\127\1\0\1\164\1\27\1\42\5\21\1\165\1\166\1\167\1\170\1\0\1\171"+
    "\4\27\1\141\1\172\2\21\1\173\1\21\1\165\1\174\1\175\1\52\1\0\1\176\4\27\1"+
    "\133\2\27\1\171\1\0\1\171\1\177\1\200\1\21\1\42\3\21\1\30\1\45\1\0\1\151\1"+
    "\201\1\0\1\45\3\0\1\202\1\203\7\27\5\21\1\55\1\0\1\204\1\0\1\171\1\67\1\205"+
    "\1\206\1\207\1\210\1\21\1\211\1\212\1\0\1\52\4\21\1\37\1\17\5\21\1\172\51"+
    "\21\1\140\1\22\1\140\5\21\1\140\4\21\1\140\1\22\1\140\1\21\1\22\7\21\1\140"+
    "\10\21\1\213\4\27\2\21\2\27\12\21\2\214\1\42\114\21\1\106\2\21\1\215\2\21"+
    "\1\51\11\21\1\137\1\21\1\133\1\21\1\32\1\216\1\27\2\21\1\216\1\27\2\21\1\217"+
    "\1\27\1\21\1\32\1\220\1\27\6\21\1\221\3\0\1\222\1\223\1\0\1\171\3\27\1\224"+
    "\1\0\1\171\13\21\1\133\1\225\4\21\1\226\10\21\1\214\1\27\3\21\1\22\1\0\1\2"+
    "\1\0\1\2\1\127\1\0\3\21\1\214\1\30\1\27\5\21\1\116\3\21\1\26\1\0\1\171\4\27"+
    "\2\21\1\167\1\2\6\21\1\201\1\170\3\0\1\113\1\0\1\171\1\0\1\171\1\160\1\27"+
    "\1\0\1\46\1\227\7\27\1\147\5\21\1\221\1\0\1\147\1\116\1\0\1\171\1\27\1\100"+
    "\1\2\1\27\1\230\3\21\1\103\1\207\1\0\1\71\4\21\1\67\1\0\1\2\1\27\4\21\1\221"+
    "\2\0\1\27\1\0\1\231\1\0\1\71\3\21\1\214\1\21\1\133\5\21\1\232\2\27\1\233\2"+
    "\0\1\234\1\235\1\236\30\21\7\0\1\237\42\21\2\214\4\21\2\214\1\21\1\240\3\21"+
    "\1\214\6\21\1\32\1\175\1\241\1\30\1\242\1\116\1\21\1\30\1\241\1\30\1\243\1"+
    "\244\3\27\1\245\1\27\1\160\1\133\1\27\1\246\1\247\1\151\1\0\1\43\1\160\2\27"+
    "\1\21\1\30\4\21\2\27\1\0\1\202\1\250\1\0\1\227\1\27\1\251\1\41\1\161\1\252"+
    "\1\31\1\253\1\21\1\254\1\255\1\256\2\27\5\21\1\133\116\27\5\21\1\22\5\21\1"+
    "\22\20\21\1\30\1\257\1\260\1\27\4\21\1\37\1\17\7\21\1\160\1\27\1\64\2\21\1"+
    "\22\1\27\10\22\4\0\5\27\1\160\72\27\1\261\3\27\1\42\1\211\1\252\1\30\1\42"+
    "\11\21\1\22\1\262\1\42\12\21\1\172\1\255\5\21\1\42\12\21\1\22\2\27\4\21\6"+
    "\27\172\21\10\27\77\21\1\30\21\21\1\30\10\27\5\21\1\214\41\21\1\30\2\21\1"+
    "\0\1\260\2\27\5\21\1\167\1\263\1\264\3\21\1\67\12\21\1\171\3\27\1\160\1\21"+
    "\1\41\14\21\1\107\6\21\1\41\1\51\4\27\1\255\1\21\1\265\1\266\2\21\1\55\1\267"+
    "\1\27\1\133\6\21\1\116\1\27\1\71\5\21\1\221\1\0\1\52\1\27\1\0\1\171\2\0\1"+
    "\71\1\270\1\0\1\71\2\21\1\67\1\52\2\21\1\167\1\0\1\2\1\27\3\21\1\30\1\101"+
    "\5\21\1\55\1\0\1\227\1\160\1\0\1\171\1\271\1\21\1\0\1\272\5\21\1\103\1\170"+
    "\1\27\1\266\1\273\1\0\1\171\2\21\1\22\1\274\6\21\1\206\1\275\1\226\2\27\1"+
    "\276\1\21\1\55\1\277\1\27\3\300\1\27\2\22\5\21\1\172\1\21\1\26\16\21\1\55"+
    "\1\301\1\0\1\171\64\21\1\116\1\27\2\21\1\22\1\302\5\21\1\116\40\27\55\21\1"+
    "\214\15\21\1\26\4\27\1\22\1\27\1\302\1\303\1\21\1\110\1\22\1\175\1\304\15"+
    "\21\1\26\3\27\1\302\54\21\1\214\2\27\10\21\1\41\6\21\5\27\1\21\1\30\2\0\2"+
    "\27\2\0\1\142\2\27\1\255\3\27\1\43\1\32\20\21\1\305\1\246\1\27\1\0\1\171\1"+
    "\42\2\21\1\50\1\42\2\21\1\51\1\306\12\21\1\22\3\41\1\307\1\310\2\27\1\311"+
    "\1\21\1\153\2\21\1\22\2\21\1\312\1\21\1\214\1\21\1\214\4\27\17\21\1\51\10"+
    "\27\6\21\1\30\20\27\1\313\20\27\3\21\1\30\6\21\1\133\1\27\1\227\3\27\4\21"+
    "\1\27\1\255\3\21\1\51\4\21\1\67\1\314\3\21\1\214\4\21\1\116\1\21\1\252\5\27"+
    "\23\21\1\214\1\0\1\171\4\21\1\116\4\21\1\116\5\21\1\27\6\21\1\116\23\27\46"+
    "\21\1\22\1\27\2\21\1\214\1\27\1\21\23\27\1\214\1\110\4\21\1\37\1\315\2\21"+
    "\1\214\1\27\2\21\1\22\1\27\3\21\1\22\10\27\2\21\1\316\1\27\2\21\1\214\1\27"+
    "\3\21\1\26\10\27\7\21\1\306\10\27\1\317\1\263\1\153\1\42\2\21\1\214\1\123"+
    "\4\27\3\21\1\30\3\21\1\30\4\27\1\21\1\42\2\21\1\320\3\27\6\21\1\214\1\27\2"+
    "\21\1\214\1\27\2\21\1\51\1\27\2\21\1\26\15\27\11\21\1\133\6\27\6\21\1\51\1"+
    "\27\6\21\1\51\1\27\4\21\1\221\1\27\1\0\1\171\50\27\5\21\1\321\1\26\11\27\3"+
    "\21\1\30\1\160\1\27\2\21\1\67\1\0\1\227\13\27\2\21\1\30\3\27\2\21\1\22\1\27"+
    "\1\230\6\21\1\0\1\170\3\27\1\127\1\0\1\27\1\64\1\230\5\21\1\0\1\322\1\27\1"+
    "\313\3\21\1\133\1\0\1\171\1\230\3\21\1\167\1\0\1\151\1\0\1\323\1\27\4\21\1"+
    "\324\1\27\1\230\5\21\1\55\1\0\1\325\1\326\1\0\1\327\4\27\2\21\1\36\2\21\1"+
    "\221\1\0\1\203\10\27\1\22\1\330\1\21\1\37\1\21\1\133\5\21\1\167\1\0\1\314"+
    "\1\0\1\171\1\331\1\106\1\107\2\21\1\110\1\131\1\332\1\113\1\124\1\146\1\255"+
    "\1\104\2\202\21\27\6\21\1\201\1\0\1\204\1\51\1\0\1\333\1\26\3\27\6\21\2\0"+
    "\1\334\1\27\1\0\1\171\24\27\5\21\1\167\1\52\1\0\1\227\2\27\1\273\4\27\6\21"+
    "\2\0\1\335\1\27\1\0\1\171\4\27\5\21\1\55\1\0\1\133\1\0\1\171\6\27\3\21\1\213"+
    "\1\0\1\2\1\0\1\171\30\27\5\21\1\221\1\0\1\314\14\27\10\21\1\0\1\171\1\27\1"+
    "\160\1\22\1\336\1\337\3\21\1\46\1\340\1\341\1\27\1\0\1\171\10\27\1\21\1\41"+
    "\4\21\1\103\1\342\1\343\3\27\1\103\1\230\4\21\1\55\1\344\1\64\1\27\1\103\1"+
    "\101\5\21\1\211\1\0\1\345\4\27\7\21\1\133\40\27\1\21\1\110\3\21\1\167\1\170"+
    "\1\0\1\133\1\27\1\0\1\171\2\27\1\41\3\21\1\342\2\0\1\45\1\170\11\27\1\22\1"+
    "\36\4\21\1\346\1\347\1\212\1\27\1\0\1\171\1\37\1\110\3\21\1\350\1\237\1\133"+
    "\1\0\1\171\46\27\2\21\1\351\27\27\1\133\4\27\1\255\1\133\3\27\63\21\1\26\14"+
    "\27\15\21\1\22\2\27\30\21\1\116\27\27\5\21\1\22\1\0\1\227\70\27\10\21\1\22"+
    "\67\27\7\21\1\133\3\21\1\22\1\0\1\171\14\27\3\21\1\214\1\202\1\27\6\21\1\170"+
    "\1\27\1\116\1\27\1\0\1\171\1\302\2\21\1\255\2\21\26\27\10\21\20\27\11\21\1"+
    "\352\1\103\6\0\1\64\1\230\1\21\10\27\1\353\1\27\1\171\1\27\77\21\1\27\32\21"+
    "\1\214\5\27\1\21\1\133\36\27\43\21\1\22\6\27\1\51\1\27\1\354\1\27\61\21\1"+
    "\116\40\27\15\21\1\51\1\21\1\30\1\21\1\133\1\21\1\355\1\2\127\27\1\135\1\356"+
    "\2\0\1\357\1\2\3\27\1\360\22\27\1\361\67\27\12\21\1\32\10\21\1\32\1\362\1"+
    "\363\1\21\1\364\1\153\7\21\1\37\1\232\2\32\3\21\1\365\1\175\1\41\1\110\51"+
    "\21\1\214\3\21\1\110\2\21\1\172\3\21\1\172\2\21\1\32\3\21\1\32\2\21\1\22\3"+
    "\21\1\22\3\21\1\110\3\21\1\110\2\21\1\172\1\366\14\0\1\170\1\100\5\0\1\202"+
    "\1\313\1\27\1\267\2\27\1\100\1\45\1\0\52\27\1\170\2\0\1\367\1\370\1\314\32"+
    "\27\5\21\1\30\1\204\1\214\1\0\1\371\56\27\5\21\1\221\1\0\1\372\40\27\30\21"+
    "\1\30\1\27\1\170\5\27\10\21\1\221\1\373\1\0\1\171\52\27\1\133\51\27\1\153"+
    "\3\21\1\374\1\42\1\172\1\375\1\251\1\376\1\374\1\240\1\374\2\172\1\126\1\21"+
    "\1\36\1\21\1\116\1\377\1\36\1\21\1\116\146\27\1\0\1\171\33\21\1\214\4\27\106"+
    "\21\1\30\1\27\33\21\1\214\120\21\1\26\1\27\146\21\1\133\3\27\3\21\1\214\74"+
    "\27\51\21\1\51\26\27\1\125\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 2048 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\2\1\16\1\15\2\16\1\15\6\2\4\0\1\16\1\21\1\20\1\0\1\1\1\65\2\0\1\50\1\51"+
    "\1\57\1\56\1\54\1\13\1\14\1\60\1\5\11\3\1\61\1\55\1\43\1\45\1\44\1\64\1\0"+
    "\1\22\1\7\1\27\1\11\1\12\1\4\1\41\1\40\1\24\1\1\1\30\1\23\1\36\1\26\1\10\1"+
    "\37\1\1\1\32\1\25\1\33\1\34\1\35\1\31\1\6\1\42\1\1\1\52\1\62\1\53\1\0\1\1"+
    "\1\6\1\42\1\1\1\46\1\63\1\47\1\0\6\2\1\17\2\2\1\16\1\0\4\1\4\0\1\1\2\0\1\2"+
    "\7\0\1\1\4\0\1\1\5\0\17\1\1\0\2\24\15\1\1\25\2\1\4\0\4\1\16\0\5\1\7\0\1\1"+
    "\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1"+
    "\0\13\1\1\0\3\1\1\0\5\2\2\0\6\1\1\0\7\1\1\0\1\1\6\0\1\1\6\0\1\1\1\0\15\2\1"+
    "\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2\3\1\4\0\4\1\5\0\6\2\5\0\1\1\4\0\3\2\1\0\1\2"+
    "\3\0\3\1\7\2\4\0\2\1\1\2\13\1\1\0\1\1\7\2\2\1\2\2\1\0\4\2\2\1\2\2\3\1\2\0"+
    "\1\1\7\0\1\2\1\1\1\2\6\1\3\2\2\0\11\1\3\2\1\1\6\0\2\2\6\1\4\2\2\1\4\0\1\1"+
    "\2\0\1\2\2\1\2\2\1\1\11\2\1\1\3\2\1\1\5\2\2\0\1\1\3\2\7\0\11\2\6\1\3\2\1\1"+
    "\2\2\1\1\7\2\2\1\2\2\2\0\2\2\1\1\3\2\1\0\10\1\2\0\2\1\2\0\6\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\1\1\5\0\2\1\1\0\5\1\7\0\2\1\1"+
    "\0\1\2\2\0\3\2\1\0\4\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0\5\2\4\0\2\2\2\0"+
    "\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\4\2\3\1\1\2\2\0\1\1\1\0\2\1\1\0\3\1\2\2\1"+
    "\0\3\2\2\0\1\1\10\0\1\1\6\2\5\0\3\2\2\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3"+
    "\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0"+
    "\6\2\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\1\0\4\1\1\0\3\1\1\0\2\1\5\0\3\1\2\2\1"+
    "\1\3\2\1\0\4\2\1\1\5\0\3\1\1\2\7\0\5\1\1\0\1\1\4\0\1\2\4\0\6\2\1\0\1\2\3\0"+
    "\2\2\4\0\1\1\1\2\2\1\7\2\4\0\10\1\10\2\1\0\2\2\6\0\3\1\1\0\10\1\1\0\1\1\1"+
    "\0\1\1\5\2\1\1\2\0\5\1\1\0\1\1\1\0\2\2\2\0\4\1\5\0\1\2\1\0\1\2\1\0\1\2\4\0"+
    "\2\2\5\1\10\2\11\0\1\2\1\0\7\2\1\1\2\2\4\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2\5\1"+
    "\14\2\1\1\1\2\3\1\2\0\3\2\6\1\2\0\1\16\11\1\3\2\3\0\2\1\2\2\4\0\1\1\1\0\2"+
    "\2\4\0\4\1\10\2\3\0\1\1\3\0\2\1\1\2\5\0\4\2\1\0\5\1\2\2\2\1\1\2\1\1\5\0\1"+
    "\2\7\0\3\2\5\1\2\2\3\0\6\1\2\0\3\1\3\2\1\0\5\2\4\1\1\2\6\1\1\2\2\1\3\2\1\1"+
    "\5\0\2\2\1\0\5\2\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0\6\1\2\0\2\1\13"+
    "\16\5\2\2\16\5\2\1\16\4\0\1\1\12\0\1\16\1\0\1\2\3\0\3\2\2\0\1\1\4\0\1\1\1"+
    "\0\5\1\2\0\1\1\1\0\1\30\3\1\1\0\3\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\4\1\3\2\2"+
    "\1\4\0\1\16\4\0\3\1\1\0\2\2\2\0\3\1\4\0\12\2\1\0\3\1\1\2\3\1\1\2\4\1\1\2\4"+
    "\1\4\0\1\2\6\0\1\1\1\0\2\1\1\2\5\1\1\2\2\1\2\2\5\1\1\0\4\1\2\2\4\0\1\1\3\2"+
    "\2\1\1\2\5\1\2\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2\1\0\2\2\5\0\5\1\5\0\1"+
    "\1\1\2\3\1\1\0\2\1\1\0\7\1\2\0\1\2\6\0\2\1\2\0\3\1\3\0\2\1\3\0\2\1\2\0\3\2"+
    "\4\0\3\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\3\2\5\0\1\1\3\0\1\1\2\0\4\1\1\0\2\1\2"+
    "\0\1\1\3\2\1\0\2\2\1\0\5\1\2\2\1\0\2\1\1\0\2\2\3\0\3\2\2\0\1\2\6\0\1\1\2\2"+
    "\4\1\1\2\2\0\1\1\1\0\1\2\4\1\4\0\4\2\1\0\4\2\1\1\1\0\1\1\3\0\1\1\1\0\4\1\1"+
    "\0\1\1\4\2\1\0\5\1\1\0\2\2\1\1\4\2\4\0\1\2\1\1\4\2\2\1\1\0\1\1\1\2\3\0\1\1"+
    "\4\0\1\1\2\0\10\1\1\0\2\1\1\0\1\2\2\0\4\2\1\1\1\2\1\1\2\2\6\0\7\2\1\1\1\0"+
    "\1\1\1\2\3\0\2\2\1\1\4\2\1\0\2\2\3\0\1\1\2\0\1\1\6\2\3\0\1\2\1\0\2\2\1\0\1"+
    "\2\2\1\5\2\1\0\3\1\4\2\1\0\3\1\4\0\1\2\2\1\1\0\1\1\1\2\7\0\6\1\3\0\2\2\1\0"+
    "\2\2\3\0\6\2\2\0\3\2\2\0\4\2\4\0\3\2\5\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1"+
    "\1\1\0\5\1\1\0\4\1\1\0\4\1\2\0\3\2\2\0\7\2\1\0\2\2\1\0\4\2\4\0\1\1\1\0\2\2"+
    "\5\0\1\1\3\2\1\1\5\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1"+
    "\0\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\3\5\2\1\4"+
    "\1\5\1\6\1\1\1\7\16\2\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\3\4\2\1\0\1\3\2\2\1\33\1\34\6\2"+
    "\1\0\1\35\3\2\1\36\12\2\1\37\13\2\12\0"+
    "\1\40\1\41\1\42\1\43\1\44\3\2\1\3\1\45"+
    "\2\2\1\46\5\2\1\47\5\2\1\50\20\2\1\51"+
    "\1\2\1\52\3\2\15\0\1\2\1\53\1\54\2\2"+
    "\1\55\1\56\13\2\1\57\5\2\1\60\1\61\6\2"+
    "\1\62\1\63\1\64\1\65\1\2\1\66\1\67\2\2"+
    "\1\70\1\71\1\72\6\0\1\73\6\0\1\74\5\2"+
    "\1\75\6\2\1\76\1\77\1\100\1\101\3\2\1\102"+
    "\1\2\1\103\2\2\1\104\1\2\1\105\3\2\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\2\2\1\122\1\123\11\2\1\124"+
    "\2\2\1\125\1\126\2\2\1\127\1\2\1\130\1\131"+
    "\2\2\1\132\1\133\1\2\1\134\2\2\1\135\1\2"+
    "\1\136\1\2\1\137\1\140\3\2\1\141\1\142\1\143"+
    "\1\144\1\145\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\66\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\u068a\0\66\0\66\0\66"+
    "\0\66\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\154\0\154\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u02be\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\154\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\154\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\66\0\66\0\66\0\66\0\154\0\u1182\0\u11b8"+
    "\0\u11ee\0\u0804\0\154\0\u1224\0\u125a\0\154\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\154\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\154\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u17a0\0\u17d6\0\154\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\154\0\154"+
    "\0\u1c0e\0\u1c44\0\154\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\154"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\154\0\154\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\154\0\154\0\154"+
    "\0\154\0\u2154\0\154\0\154\0\u218a\0\u21c0\0\154\0\154"+
    "\0\154\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\66"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\154\0\u247e"+
    "\0\u24b4\0\u24ea\0\u2520\0\u2556\0\154\0\u258c\0\u25c2\0\u25f8"+
    "\0\u262e\0\u2664\0\u269a\0\154\0\154\0\154\0\154\0\u26d0"+
    "\0\u2706\0\u273c\0\154\0\u2772\0\154\0\u27a8\0\u27de\0\154"+
    "\0\u2814\0\154\0\u284a\0\u2880\0\u28b6\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u28ec\0\u2922\0\154\0\154\0\u2958\0\u298e\0\u29c4"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\154\0\u2b3e"+
    "\0\u2b74\0\154\0\154\0\u2baa\0\u2be0\0\154\0\u2c16\0\154"+
    "\0\154\0\u2c4c\0\u2c82\0\154\0\154\0\u2cb8\0\154\0\u2cee"+
    "\0\u2d24\0\154\0\u2d5a\0\154\0\u2d90\0\154\0\154\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\154\0\154\0\154\0\154\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\3\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\3\1\36"+
    "\1\3\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\67\0\12\3\4\0\1\3"+
    "\2\0\21\3\26\0\1\4\1\0\1\4\4\0\1\62"+
    "\1\0\1\63\52\0\7\3\1\64\2\3\4\0\1\3"+
    "\2\0\1\65\7\3\1\66\1\3\1\67\6\3\26\0"+
    "\1\4\1\0\1\4\1\70\2\71\1\0\1\62\1\0"+
    "\1\63\52\0\7\3\1\72\2\3\4\0\1\3\2\0"+
    "\21\3\24\0\12\3\4\0\1\3\2\0\1\73\20\3"+
    "\24\0\12\3\4\0\1\3\2\0\10\3\1\74\10\3"+
    "\24\0\7\3\1\75\1\3\1\76\4\0\1\3\2\0"+
    "\2\3\1\77\16\3\24\0\5\3\1\100\4\3\4\0"+
    "\1\3\2\0\1\3\1\101\2\3\1\102\3\3\1\103"+
    "\10\3\26\0\1\63\1\0\1\63\75\0\3\16\46\0"+
    "\15\104\1\0\2\104\1\105\45\104\15\20\1\0\50\20"+
    "\1\0\12\3\4\0\1\3\2\0\1\3\1\106\2\3"+
    "\1\107\14\3\24\0\7\3\1\110\2\3\4\0\1\3"+
    "\2\0\21\3\24\0\3\3\1\111\6\3\4\0\1\3"+
    "\2\0\4\3\1\112\14\3\24\0\12\3\4\0\1\3"+
    "\2\0\11\3\1\113\6\3\1\114\24\0\7\3\1\115"+
    "\2\3\4\0\1\3\2\0\21\3\24\0\7\3\1\116"+
    "\2\3\4\0\1\3\2\0\1\117\20\3\24\0\12\3"+
    "\4\0\1\3\2\0\2\3\1\120\13\3\1\121\2\3"+
    "\24\0\11\3\1\122\4\0\1\3\2\0\1\123\20\3"+
    "\24\0\7\3\1\124\1\3\1\125\4\0\1\3\2\0"+
    "\1\126\7\3\1\127\5\3\1\130\2\3\24\0\12\3"+
    "\4\0\1\3\2\0\4\3\1\131\14\3\24\0\12\3"+
    "\4\0\1\3\2\0\1\132\1\3\1\133\16\3\24\0"+
    "\7\3\1\134\2\3\4\0\1\3\2\0\21\3\24\0"+
    "\11\3\1\135\4\0\1\3\2\0\10\3\1\136\10\3"+
    "\24\0\7\3\1\137\2\3\4\0\1\3\2\0\21\3"+
    "\34\0\1\140\1\141\7\0\1\142\1\0\1\143\1\144"+
    "\1\0\1\145\2\0\1\146\1\147\1\0\1\150\1\0"+
    "\1\151\4\0\1\152\1\153\65\0\1\154\65\0\1\155"+
    "\23\0\1\71\1\0\1\71\5\0\1\71\42\0\1\71"+
    "\12\0\1\63\1\0\1\63\4\0\1\62\54\0\12\3"+
    "\4\0\1\3\2\0\10\3\1\156\10\3\24\0\12\3"+
    "\4\0\1\3\2\0\1\3\1\157\17\3\24\0\7\3"+
    "\1\160\2\3\4\0\1\3\2\0\21\3\24\0\12\3"+
    "\4\0\1\3\2\0\4\3\1\161\14\3\26\0\3\162"+
    "\1\0\1\162\1\0\2\162\7\0\1\162\4\0\1\162"+
    "\41\0\1\71\1\0\1\71\61\0\12\3\4\0\1\3"+
    "\2\0\10\3\1\163\10\3\24\0\12\3\4\0\1\3"+
    "\2\0\5\3\1\164\13\3\24\0\3\3\1\165\6\3"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\13\3\1\166\5\3\24\0\12\3\4\0\1\3"+
    "\2\0\2\3\1\167\16\3\24\0\12\3\4\0\1\3"+
    "\2\0\3\3\1\170\15\3\24\0\10\3\1\171\1\3"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\10\3\1\172\10\3\43\0\1\104\46\0\12\3"+
    "\4\0\1\3\2\0\2\3\1\173\16\3\24\0\10\3"+
    "\1\174\1\3\4\0\1\3\2\0\21\3\24\0\12\3"+
    "\4\0\1\3\2\0\5\3\1\175\13\3\24\0\7\3"+
    "\1\176\2\3\4\0\1\3\2\0\21\3\24\0\11\3"+
    "\1\177\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\3\3\1\200\15\3\24\0\12\3\4\0"+
    "\1\3\2\0\3\3\1\201\5\3\1\202\1\3\1\203"+
    "\5\3\24\0\12\3\4\0\1\3\2\0\4\3\1\204"+
    "\14\3\24\0\12\3\4\0\1\3\2\0\3\3\1\205"+
    "\15\3\24\0\12\3\4\0\1\3\2\0\11\3\1\206"+
    "\7\3\24\0\12\3\4\0\1\3\2\0\2\3\1\207"+
    "\16\3\24\0\12\3\4\0\1\3\2\0\1\210\4\3"+
    "\1\211\3\3\1\212\7\3\24\0\12\3\4\0\1\3"+
    "\2\0\2\3\1\213\16\3\24\0\12\3\4\0\1\3"+
    "\2\0\3\3\1\214\15\3\24\0\12\3\4\0\1\3"+
    "\2\0\3\3\1\215\15\3\24\0\12\3\4\0\1\3"+
    "\2\0\1\216\11\3\1\217\5\3\1\220\24\0\11\3"+
    "\1\221\4\0\1\3\2\0\21\3\24\0\10\3\1\222"+
    "\1\3\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\10\3\1\223\10\3\24\0\11\3\1\224"+
    "\4\0\1\3\2\0\21\3\24\0\10\3\1\225\1\3"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\10\3\1\226\10\3\24\0\7\3\1\227\2\3"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\11\3\1\230\7\3\34\0\1\231\12\0\1\232"+
    "\47\0\1\233\15\0\1\234\64\0\1\235\6\0\1\236"+
    "\44\0\1\237\112\0\1\240\54\0\1\241\51\0\1\242"+
    "\65\0\1\243\76\0\1\244\65\0\1\245\44\0\12\3"+
    "\4\0\1\3\2\0\3\3\1\246\15\3\24\0\12\3"+
    "\4\0\1\3\2\0\14\3\1\247\4\3\24\0\12\3"+
    "\4\0\1\3\2\0\5\3\1\250\13\3\24\0\12\3"+
    "\4\0\1\3\2\0\6\3\1\251\12\3\24\0\12\3"+
    "\4\0\1\3\2\0\1\252\20\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\253\7\3\24\0\11\3\1\254"+
    "\4\0\1\3\2\0\21\3\24\0\3\3\1\255\6\3"+
    "\4\0\1\3\2\0\2\3\1\256\4\3\1\257\1\260"+
    "\1\261\2\3\1\262\1\263\3\3\24\0\7\3\1\264"+
    "\2\3\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\1\265\20\3\24\0\12\3\4\0\1\3"+
    "\2\0\1\266\20\3\24\0\12\3\4\0\1\3\2\0"+
    "\12\3\1\267\6\3\24\0\12\3\4\0\1\3\2\0"+
    "\15\3\1\270\3\3\24\0\12\3\4\0\1\3\2\0"+
    "\14\3\1\271\4\3\24\0\12\3\4\0\1\3\2\0"+
    "\11\3\1\272\7\3\24\0\12\3\4\0\1\3\2\0"+
    "\2\3\1\273\16\3\24\0\12\3\4\0\1\3\2\0"+
    "\3\3\1\274\1\275\14\3\24\0\11\3\1\276\4\0"+
    "\1\3\2\0\21\3\24\0\12\3\4\0\1\3\2\0"+
    "\16\3\1\277\2\3\24\0\12\3\4\0\1\3\2\0"+
    "\1\3\1\300\17\3\24\0\10\3\1\301\1\3\4\0"+
    "\1\3\2\0\21\3\24\0\7\3\1\302\2\3\4\0"+
    "\1\3\2\0\21\3\24\0\12\3\4\0\1\3\2\0"+
    "\10\3\1\303\1\3\1\304\6\3\24\0\12\3\4\0"+
    "\1\3\2\0\3\3\1\305\15\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\306\7\3\24\0\12\3\4\0"+
    "\1\3\2\0\6\3\1\307\12\3\24\0\12\3\4\0"+
    "\1\3\2\0\15\3\1\310\3\3\24\0\11\3\1\311"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\4\3\1\312\14\3\24\0\12\3\4\0\1\3"+
    "\2\0\4\3\1\313\14\3\24\0\7\3\1\314\2\3"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\7\3\1\315\11\3\24\0\12\3\4\0\1\3"+
    "\2\0\12\3\1\316\6\3\24\0\12\3\4\0\1\3"+
    "\2\0\3\3\1\317\15\3\24\0\12\3\4\0\1\3"+
    "\2\0\5\3\1\320\13\3\24\0\7\3\1\321\2\3"+
    "\4\0\1\3\2\0\21\3\51\0\1\322\75\0\1\323"+
    "\66\0\1\324\61\0\1\325\65\0\1\326\73\0\1\327"+
    "\70\0\1\330\54\0\1\331\44\0\1\332\101\0\1\333"+
    "\65\0\1\334\71\0\1\335\65\0\1\336\34\0\11\3"+
    "\1\337\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\7\3\1\340\11\3\24\0\12\3\4\0"+
    "\1\3\2\0\12\3\1\341\6\3\24\0\12\3\4\0"+
    "\1\3\2\0\2\3\1\342\16\3\24\0\7\3\1\343"+
    "\2\3\4\0\1\3\2\0\12\3\1\344\6\3\24\0"+
    "\3\3\1\345\6\3\4\0\1\3\2\0\21\3\24\0"+
    "\12\3\4\0\1\3\2\0\16\3\1\346\2\3\24\0"+
    "\11\3\1\347\4\0\1\3\2\0\21\3\24\0\11\3"+
    "\1\350\4\0\1\3\2\0\10\3\1\351\10\3\24\0"+
    "\7\3\1\352\2\3\4\0\1\3\2\0\21\3\24\0"+
    "\12\3\4\0\1\3\2\0\10\3\1\353\10\3\24\0"+
    "\12\3\4\0\1\3\2\0\10\3\1\354\10\3\24\0"+
    "\12\3\4\0\1\3\2\0\3\3\1\355\15\3\24\0"+
    "\12\3\4\0\1\3\2\0\1\3\1\356\17\3\24\0"+
    "\12\3\4\0\1\3\2\0\11\3\1\357\7\3\24\0"+
    "\7\3\1\360\2\3\4\0\1\3\2\0\21\3\24\0"+
    "\11\3\1\361\4\0\1\3\2\0\21\3\24\0\11\3"+
    "\1\362\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\363\7\3\24\0\11\3\1\364"+
    "\4\0\1\3\2\0\21\3\24\0\11\3\1\365\4\0"+
    "\1\3\2\0\21\3\24\0\7\3\1\366\2\3\4\0"+
    "\1\3\2\0\21\3\24\0\12\3\4\0\1\3\2\0"+
    "\10\3\1\367\10\3\24\0\12\3\4\0\1\3\2\0"+
    "\20\3\1\370\24\0\12\3\4\0\1\3\2\0\10\3"+
    "\1\371\10\3\24\0\11\3\1\372\4\0\1\3\2\0"+
    "\21\3\24\0\11\3\1\373\4\0\1\3\2\0\21\3"+
    "\24\0\7\3\1\374\2\3\4\0\1\3\2\0\21\3"+
    "\24\0\12\3\4\0\1\3\2\0\1\3\1\375\17\3"+
    "\67\0\1\376\65\0\1\377\65\0\1\u0100\65\0\1\u0101"+
    "\65\0\1\u0102\65\0\1\u0103\65\0\1\u0104\65\0\1\u0105"+
    "\65\0\1\u0106\65\0\1\u0107\65\0\1\u0108\65\0\1\u0109"+
    "\22\0\12\3\4\0\1\3\2\0\1\u010a\20\3\24\0"+
    "\12\3\4\0\1\3\2\0\1\3\1\u010b\17\3\24\0"+
    "\3\3\1\u010c\6\3\4\0\1\3\2\0\21\3\24\0"+
    "\12\3\4\0\1\3\2\0\10\3\1\u010d\10\3\24\0"+
    "\12\3\4\0\1\3\2\0\4\3\1\u010e\14\3\24\0"+
    "\12\3\4\0\1\3\2\0\2\3\1\u010f\16\3\24\0"+
    "\12\3\4\0\1\3\2\0\5\3\1\u0110\13\3\24\0"+
    "\12\3\4\0\1\3\2\0\3\3\1\u0111\15\3\24\0"+
    "\12\3\4\0\1\3\2\0\1\u0112\20\3\24\0\10\3"+
    "\1\u0113\1\3\4\0\1\3\2\0\21\3\24\0\7\3"+
    "\1\u0114\2\3\4\0\1\3\2\0\21\3\24\0\10\3"+
    "\1\u0115\1\3\4\0\1\3\2\0\21\3\24\0\12\3"+
    "\4\0\1\3\2\0\15\3\1\u0116\3\3\24\0\12\3"+
    "\4\0\1\3\2\0\7\3\1\u0117\11\3\24\0\12\3"+
    "\4\0\1\3\2\0\5\3\1\u0118\13\3\24\0\12\3"+
    "\4\0\1\3\2\0\4\3\1\u0119\14\3\24\0\10\3"+
    "\1\u011a\1\3\4\0\1\3\2\0\21\3\24\0\12\3"+
    "\4\0\1\3\2\0\4\3\1\u011b\14\3\24\0\5\3"+
    "\1\u011c\4\3\4\0\1\3\2\0\21\3\24\0\12\3"+
    "\4\0\1\3\2\0\4\3\1\u011d\14\3\24\0\11\3"+
    "\1\u011e\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\10\3\1\u011f\10\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\u0120\7\3\24\0\12\3\4\0"+
    "\1\3\2\0\5\3\1\u0121\13\3\24\0\12\3\4\0"+
    "\1\3\2\0\1\3\1\u0122\17\3\24\0\7\3\1\u0123"+
    "\2\3\4\0\1\3\2\0\21\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\u0124\7\3\24\0\12\3\4\0"+
    "\1\3\2\0\15\3\1\u0125\3\3\24\0\12\3\4\0"+
    "\1\3\2\0\12\3\1\u0126\6\3\24\0\12\3\4\0"+
    "\1\3\2\0\5\3\1\u0127\13\3\24\0\12\3\4\0"+
    "\1\3\2\0\12\3\1\u0128\6\3\24\0\12\3\4\0"+
    "\1\3\2\0\2\3\1\u0129\16\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\u012a\7\3\24\0\12\3\4\0"+
    "\1\3\2\0\1\3\1\u012b\17\3\24\0\12\3\4\0"+
    "\1\3\2\0\11\3\1\u012c\7\3\24\0\12\3\4\0"+
    "\1\3\2\0\1\3\1\u012d\17\3\24\0\10\3\1\u012e"+
    "\1\3\4\0\1\3\2\0\21\3\24\0\11\3\1\u012f"+
    "\4\0\1\3\2\0\21\3\24\0\12\3\4\0\1\3"+
    "\2\0\10\3\1\u0130\10\3\24\0\12\3\4\0\1\3"+
    "\2\0\1\3\1\u0131\17\3\24\0\12\3\4\0\1\3"+
    "\2\0\1\3\1\u0132\17\3\24\0\12\3\4\0\1\3"+
    "\2\0\4\3\1\u0133\14\3\24\0\12\3\4\0\1\3"+
    "\2\0\20\3\1\u0134\24\0\12\3\4\0\1\3\2\0"+
    "\20\3\1\u0135\24\0\10\3\1\u0136\1\3\4\0\1\3"+
    "\2\0\21\3\24\0\11\3\1\u0137\4\0\1\3\2\0"+
    "\21\3\24\0\11\3\1\u0138\4\0\1\3\2\0\21\3"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\24\1\14\11\1\1\4\11"+
    "\6\1\1\0\13\1\1\0\33\1\12\0\4\11\53\1"+
    "\15\0\54\1\6\0\1\11\6\0\37\1\14\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _RapidLexer() {
      this((java.io.Reader) null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RapidLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 103: break;
          case 2: 
            { return RapidTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 104: break;
          case 3: 
            { return RapidTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 105: break;
          case 4: 
            { return RapidTokenTypes.MINUS;
            } 
            // fall through
          case 106: break;
          case 5: 
            { return RapidTokenTypes.DOT;
            } 
            // fall through
          case 107: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 108: break;
          case 7: 
            { return RapidTokenTypes.COMMENT;
            } 
            // fall through
          case 109: break;
          case 8: 
            { return RapidTokenTypes.LT;
            } 
            // fall through
          case 110: break;
          case 9: 
            { return RapidTokenTypes.GT;
            } 
            // fall through
          case 111: break;
          case 10: 
            { return RapidTokenTypes.EQ;
            } 
            // fall through
          case 112: break;
          case 11: 
            { return RapidTokenTypes.LBRACE;
            } 
            // fall through
          case 113: break;
          case 12: 
            { return RapidTokenTypes.RBRACE;
            } 
            // fall through
          case 114: break;
          case 13: 
            { return RapidTokenTypes.LPARENTH;
            } 
            // fall through
          case 115: break;
          case 14: 
            { return RapidTokenTypes.RPARENTH;
            } 
            // fall through
          case 116: break;
          case 15: 
            { return RapidTokenTypes.LBRACKET;
            } 
            // fall through
          case 117: break;
          case 16: 
            { return RapidTokenTypes.RBRACKET;
            } 
            // fall through
          case 118: break;
          case 17: 
            { return RapidTokenTypes.COMMA;
            } 
            // fall through
          case 119: break;
          case 18: 
            { return RapidTokenTypes.SEMICOLON;
            } 
            // fall through
          case 120: break;
          case 19: 
            { return RapidTokenTypes.PLUS;
            } 
            // fall through
          case 121: break;
          case 20: 
            { return RapidTokenTypes.ASTERISK;
            } 
            // fall through
          case 122: break;
          case 21: 
            { return RapidTokenTypes.DIV;
            } 
            // fall through
          case 123: break;
          case 22: 
            { return RapidTokenTypes.COLON;
            } 
            // fall through
          case 124: break;
          case 23: 
            { return RapidTokenTypes.BACKSLASH;
            } 
            // fall through
          case 125: break;
          case 24: 
            { return RapidTokenTypes.LINE;
            } 
            // fall through
          case 126: break;
          case 25: 
            { return RapidTokenTypes.QUESTION;
            } 
            // fall through
          case 127: break;
          case 26: 
            { return RapidTokenTypes.PERCENT;
            } 
            // fall through
          case 128: break;
          case 27: 
            { return RapidTokenTypes.OR_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 28: 
            { return RapidTokenTypes.DO_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 29: 
            { return RapidTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 131: break;
          case 30: 
            { return RapidTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 31: 
            { return RapidTokenTypes.TO_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 32: 
            { return RapidTokenTypes.LTGT;
            } 
            // fall through
          case 134: break;
          case 33: 
            { return RapidTokenTypes.LE;
            } 
            // fall through
          case 135: break;
          case 34: 
            { return RapidTokenTypes.GE;
            } 
            // fall through
          case 136: break;
          case 35: 
            { return RapidTokenTypes.CEQ;
            } 
            // fall through
          case 137: break;
          case 36: 
            { return RapidTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 37: 
            { return RapidTokenTypes.XOR_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 38: 
            { return RapidTokenTypes.DIV_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 39: 
            { return RapidTokenTypes.AND_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 40: 
            { return RapidTokenTypes.NOT_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 41: 
            { return RapidTokenTypes.VAR_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 42: 
            { return RapidTokenTypes.MOD_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 43: 
            { return RapidTokenTypes.FROM_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 44: 
            { return RapidTokenTypes.FUNC_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 45: 
            { return RapidTokenTypes.EXIT_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 46: 
            { return RapidTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 47: 
            { return RapidTokenTypes.STEP_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 48: 
            { return RapidTokenTypes.CASE_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 49: 
            { return RapidTokenTypes.WITH_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 50: 
            { return RapidTokenTypes.TEST_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 51: 
            { return RapidTokenTypes.TASK_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 52: 
            { return RapidTokenTypes.TRAP_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 53: 
            { return RapidTokenTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 54: 
            { return RapidTokenTypes.THEN_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 55: 
            { return RapidTokenTypes.UNDO_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 56: 
            { return RapidTokenTypes.PERS_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 57: 
            { return RapidTokenTypes.PROC_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 58: 
            { return RapidTokenTypes.GOTO_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 59: 
            { return RapidTokenTypes.ID_PLACEHOLDER;
            } 
            // fall through
          case 161: break;
          case 60: 
            { return RapidTokenTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 61: 
            { return RapidTokenTypes.ENDIF_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 62: 
            { return RapidTokenTypes.ERROR_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 63: 
            { return RapidTokenTypes.ALIAS_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 64: 
            { return RapidTokenTypes.LOCAL_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 65: 
            { return RapidTokenTypes.INOUT_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 66: 
            { return RapidTokenTypes.CONST_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 67: 
            { return RapidTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 68: 
            { return RapidTokenTypes.RETRY_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 69: 
            { return RapidTokenTypes.RAISE_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 70: 
            { return RapidTokenTypes.DDN_PLACEHOLDER;
            } 
            // fall through
          case 172: break;
          case 71: 
            { return RapidTokenTypes.DIM_PLACEHOLDER;
            } 
            // fall through
          case 173: break;
          case 72: 
            { return RapidTokenTypes.EXP_PLACEHOLDER;
            } 
            // fall through
          case 174: break;
          case 73: 
            { return RapidTokenTypes.EIT_PLACEHOLDER;
            } 
            // fall through
          case 175: break;
          case 74: 
            { return RapidTokenTypes.ALT_PLACEHOLDER;
            } 
            // fall through
          case 176: break;
          case 75: 
            { return RapidTokenTypes.ARG_PLACEHOLDER;
            } 
            // fall through
          case 177: break;
          case 76: 
            { return RapidTokenTypes.SMT_PLACEHOLDER;
            } 
            // fall through
          case 178: break;
          case 77: 
            { return RapidTokenTypes.CSE_PLACEHOLDER;
            } 
            // fall through
          case 179: break;
          case 78: 
            { return RapidTokenTypes.RDN_PLACEHOLDER;
            } 
            // fall through
          case 180: break;
          case 79: 
            { return RapidTokenTypes.TDN_PLACEHOLDER;
            } 
            // fall through
          case 181: break;
          case 80: 
            { return RapidTokenTypes.VAR_PLACEHOLDER;
            } 
            // fall through
          case 182: break;
          case 81: 
            { return RapidTokenTypes.PAR_PLACEHOLDER;
            } 
            // fall through
          case 183: break;
          case 82: 
            { return RapidTokenTypes.ELSEIF_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 83: 
            { return RapidTokenTypes.ENDFOR_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 84: 
            { return RapidTokenTypes.NOVIEW_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 85: 
            { return RapidTokenTypes.RECORD_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 86: 
            { return RapidTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 87: 
            { return RapidTokenTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 88: 
            { return RapidTokenTypes.DEFAULT_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 89: 
            { return RapidTokenTypes.ENDFUNC_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 90: 
            { return RapidTokenTypes.ENDTEST_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 91: 
            { return RapidTokenTypes.ENDTRAP_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 92: 
            { return RapidTokenTypes.ENDPROC_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 93: 
            { return RapidTokenTypes.CONNECT_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 94: 
            { return RapidTokenTypes.TRYNEXT_KEYWORD;
            } 
            // fall through
          case 196: break;
          case 95: 
            { return RapidTokenTypes.BACKWARD_KEYWORD;
            } 
            // fall through
          case 197: break;
          case 96: 
            { return RapidTokenTypes.ENDWHILE_KEYWORD;
            } 
            // fall through
          case 198: break;
          case 97: 
            { return RapidTokenTypes.NOSTEPIN_KEYWORD;
            } 
            // fall through
          case 199: break;
          case 98: 
            { return RapidTokenTypes.READONLY_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 99: 
            { return RapidTokenTypes.VIEWONLY_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 100: 
            { return RapidTokenTypes.ENDRECORD_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 101: 
            { return RapidTokenTypes.ENDMODULE_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 102: 
            { return RapidTokenTypes.SYSMODULE_KEYWORD;
            } 
            // fall through
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
